import base64url from 'base64url';
import crypto from 'crypto';
import canonicalize from 'canonicalize';

import { UNIVERSAL_WALLET_CONTEXT_URL, placeHolderImage } from '../constants';

import { getCreateOperation } from './getCreateOperation';
import { toKeyPair } from './toKeyPair';
import { getSidetreeKeyPairRepresentations } from './getSidetreeKeyPairRepresentations';

import { DidDocument } from '../types';

export const toDidDoc = async (
  mnemonic: string,
  index: number,
  didMethodName: string
): Promise<DidDocument> => {
  console.warn('@sidetree.js does not support ed25519 currently.');

  const first_key = await toKeyPair(
    mnemonic,
    index,
    'EcdsaSecp256k1Verification2018'
  );
  const key = await getSidetreeKeyPairRepresentations(first_key);
  const createOperation = await getCreateOperation(mnemonic, index);

  const didUniqueSuffix = base64url.encode(
    crypto
      .createHash('sha256')
      .update(
        canonicalize(JSON.parse(base64url.decode(createOperation.suffix_data)))
      )
      .digest()
  );

  const shortFormDid = `did:${didMethodName}:${didUniqueSuffix}`;

  const longFormDid = `${shortFormDid}?-${
    didMethodName.split(':')[0]
  }-initial-state=${createOperation.suffix_data}.${createOperation.delta}`;

  const didDocument = {
    '@context': [
      'https://www.w3.org/ns/did/v1',
      {
        '@base': shortFormDid,
      },
    ],
    id: shortFormDid,
    publicKey: [
      {
        id: '#' + key.kid,
        type: 'JsonWebKey2020',
        controller: shortFormDid,
        publicKeyJwk: key.publicKeyJwk,
      },
    ],
    authentication: ['#' + key.kid],
  };

  return {
    '@context': [UNIVERSAL_WALLET_CONTEXT_URL],
    id: longFormDid,
    name: 'Sidetree DID',
    image: placeHolderImage,
    description: 'Generated by @sidetree/wallet.',
    tags: [],
    type: 'DID',
    didDocument,
  };
};
